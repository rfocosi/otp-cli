#!/bin/sh

APP_HOME="$HOME/otp-cli"
TOKENFILES_DIR="$APP_HOME/tokens"
CONFIG_FILE="$APP_HOME/config"
WAIT_FOR_NEXT=0
ENCRYPTED=0

if [ ! -f "$CONFIG_FILE" ]; then
  mkdir -p $APP_HOME
  cat $CURRENT_DIR/config-example > $CONFIG_FILE
  chmod 700 $CONFIG_FILE
fi

. $CONFIG_FILE

[ -z $OS ] && OS=$( uname )

LAST_PASSWORD=0

check_tokenfiles_dir()
{
  if [ ! -d $TOKENFILES_DIR ]; then
    echo "ERROR: Directory $TOKENFILES_DIR not created!"
    exit 1
  fi

  check_permissions $TOKENFILES_DIR "700"
}

set_tokenfiles_dir()
{
  if [ ! -d "$TOKENFILES_DIR" ]; then
    mkdir -p $TOKENFILES_DIR
    chmod 700 $TOKENFILES_DIR
  fi
}

check_permissions()
{
  if [ $( stat --version | head -n 1 | grep -c GNU ) = "1" ]; then
    PERMISSIONS=$( stat -L -c "%a" $1 )
  else
    PERMISSIONS=$( stat -L -f "%A" $1 )
  fi

  if [ $PERMISSIONS != $2 ]; then
    echo "Perms on [$1] are too permissive. Try 'chmod $2 $1' first"
    exit 1
  fi
}

get_token_file()
{
  TOKEN_PATH=${TOKENFILES_DIR}/${TOKEN_NAME}
  set "${TOKEN_PATH}.enc" "${TOKEN_PATH}"
  FILES="$@"
  for file in $FILES; do
    if [ -f "${file}" ]; then
      check_permissions $file "400"
      TOKEN_FILE="${file}"
      if [ "$( basename -s .enc $file )" != "$( basename $file )" ]; then
        ENCRYPTED=1
      fi
      return 0
    fi
  done

  echo "ERROR: Token file '$TOKEN_NAME' doesn't exist"
  exit 1
}

decrypt_token_from_file()
{
  read_hidden_input "OTP Password: "
  echo $IN | openssl enc -aes-256-cbc -d -salt -pass stdin -in $TOKEN_FILE
}

plaintext_token_from_file()
{
  cat $TOKEN_FILE
}

get_token()
{
  get_token_file
  if [ $ENCRYPTED -eq 0 ]; then
    TOKEN=$( plaintext_token_from_file $TOKEN_FILE )
  else
    TOKEN=$( decrypt_token_from_file $TOKEN_FILE )
  fi

  echo "$TOKEN" | grep -Eqv '^[0-9A-Za-z]+$' && exit 1
}

verify_command()
{
  command -v $1 >/dev/null 2>&1 || { echo >&2 "\n\nRequired '$1'. Install it and try again.\nAborting."; exit 1; }
}

copy_to_clipboard()
{
  if [ "$1" != "$LAST_PASSWORD" ]; then
    if [ $OS = "Darwin" ]; then
      verify_command "pbcopy"
      printf "$1" | pbcopy
    elif [ $OS = "Linux" ]; then
      verify_command "xclip"
      printf "$1" | xclip -sel clip
    fi
    LAST_PASSWORD="$1"
  fi
}

read_token_name()
{
  if [ -z "$TOKEN_NAME" ]; then
    read -r -p "Token name: " TOKEN_NAME
    if [ -z "$TOKEN_NAME" ]; then
      show_usage "Token name can not be empty"
      exit 1
    fi
  fi
}

remaining_seconds()
{
  REMAINING=$(( 30 - (`date +%-S` % 30) ))
}

read_hidden_input()
{
  stty -echo
  read -r -p "$1" IN
  stty echo
}

get_otp()
{
  OTP=$( oathtool --totp -b "$1" )
}

verify_command "openssl"

set_tokenfiles_dir
check_tokenfiles_dir
